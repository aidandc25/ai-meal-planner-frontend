{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aidan\\\\OneDrive\\\\Documents\\\\Projects\\\\ai-meal-planner\\\\src\\\\components\\\\MealPlannerForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MEAL_STYLES = [\"Vegan\", \"Vegetarian\", \"Pescatarian\", \"Keto\", \"Paleo\", \"Mediterranean\", \"High-Protein\", \"Low-Carb\", \"Low-Fat\", \"Whole30\"];\nconst MEAL_ORDER = [\"Breakfast\", \"Lunch\", \"Dinner\"];\nfunction MealPlannerForm() {\n  _s();\n  const [form, setForm] = useState({\n    mealStyles: [],\n    goal: '',\n    mealsPerDay: 3,\n    planLength: 7,\n    budget: '',\n    allergies: ''\n  });\n  const [loading, setLoading] = useState(false);\n  const [mealPlan, setMealPlan] = useState('');\n  const [error, setError] = useState('');\n  const [parsedPlan, setParsedPlan] = useState({\n    days: [],\n    groceryList: {}\n  });\n  const handleChange = e => {\n    const {\n      name,\n      value,\n      type,\n      checked\n    } = e.target;\n    if (name === \"mealStyles\") {\n      setForm(prev => ({\n        ...prev,\n        mealStyles: checked ? [...prev.mealStyles, value] : prev.mealStyles.filter(v => v !== value)\n      }));\n    } else {\n      setForm({\n        ...form,\n        [name]: value\n      });\n    }\n  };\n  const cleanLine = line => line.replace(/\\*+/g, '') // remove asterisks\n  .replace(/：/g, ':') // convert full-width colon\n  .replace(/^\\s+|\\s+$/g, ''); // trim whitespace\n\n  const parseMealPlan = text => {\n    const lines = text.split('\\n').map(cleanLine).filter(Boolean);\n    const days = [];\n    const groceryList = {};\n    let currentDay = null;\n    let currentMeal = null;\n    let currentGroceryCategory = '';\n    let inGrocery = false;\n    const dayRegex = /^Day\\s+\\d+:?/i;\n    const mealRegex = /^(Breakfast|Lunch|Dinner):/i;\n    for (let line of lines) {\n      if (dayRegex.test(line)) {\n        if (currentDay) days.push(currentDay);\n        currentDay = {\n          title: line.replace(':', ''),\n          meals: []\n        };\n        inGrocery = false;\n      } else if (mealRegex.test(line)) {\n        const [type, ...rest] = line.split(':');\n        currentMeal = {\n          type: type.trim(),\n          title: rest.join(':').trim(),\n          steps: []\n        };\n        if (currentDay) currentDay.meals.push(currentMeal);\n      } else if (line.startsWith('-') && currentMeal) {\n        currentMeal.steps.push(line.replace(/^[-–]\\s*/, ''));\n      } else if (line.toLowerCase().includes('grocery list')) {\n        inGrocery = true;\n        if (currentDay) days.push(currentDay);\n        currentDay = null;\n      } else if (inGrocery && line.endsWith(':')) {\n        currentGroceryCategory = line.replace(':', '');\n        groceryList[currentGroceryCategory] = [];\n      } else if (inGrocery && line.startsWith('-')) {\n        var _groceryList$currentG;\n        (_groceryList$currentG = groceryList[currentGroceryCategory]) === null || _groceryList$currentG === void 0 ? void 0 : _groceryList$currentG.push(line.replace('- ', ''));\n      }\n    }\n    if (currentDay) days.push(currentDay);\n\n    // Final trim of day and meal counts\n    const trimmedDays = days.slice(0, Number(form.planLength)).map(day => {\n      const validMeals = MEAL_ORDER.map(type => day.meals.find(m => m.type.toLowerCase() === type.toLowerCase())).filter(Boolean);\n      return {\n        ...day,\n        meals: validMeals.slice(0, form.mealsPerDay)\n      };\n    });\n    return {\n      days: trimmedDays,\n      groceryList\n    };\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    setMealPlan('');\n    setError('');\n    setParsedPlan({\n      days: [],\n      groceryList: {}\n    });\n    const prompt = `\nYou are a meal planner AI. Generate a ${form.planLength}-day meal plan with exactly ${form.mealsPerDay} meals per day.\nMeal styles: ${form.mealStyles.length ? form.mealStyles.join(', ') : 'None'}\nGoal: ${form.goal}, Budget: ${form.budget}, Allergies: ${form.allergies || 'None'}\n\nFormat it like this:\nDay 1:\nBreakfast: [title]\n- step\n- step\nLunch: [title]\n- step\nDinner: [title]\n- step\n\nOnly use the number of meals selected, and follow meal label order: Breakfast, Lunch, Dinner.\n\nGROCERY LIST:\nProduce:\n- ...\nGrains:\n- ...\n`;\n    try {\n      const response = await fetch(\"http://localhost:5000/api/mealplan\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          prompt\n        })\n      });\n      const data = await response.json();\n      if (data.result) {\n        console.log(\"GPT RAW:\", data.result);\n        setMealPlan(data.result);\n        const parsed = parseMealPlan(data.result);\n        setParsedPlan(parsed);\n      } else {\n        setError(\"Something went wrong. Please try again.\");\n      }\n    } catch (err) {\n      console.error(err);\n      setError(\"Could not connect to backend.\");\n    }\n    setLoading(false);\n  };\n  const handleDownload = () => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([mealPlan], {\n      type: \"text/plain\"\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = \"meal-plan.txt\";\n    document.body.appendChild(element);\n    element.click();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Meal Style Preferences:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexWrap: 'wrap',\n            gap: '10px'\n          },\n          children: MEAL_STYLES.map(style => /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              name: \"mealStyles\",\n              value: style,\n              checked: form.mealStyles.includes(style),\n              onChange: handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 17\n            }, this), \" \", style]\n          }, style, true, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Meal Planning Goal:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"goal\",\n        value: form.goal,\n        onChange: handleChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a goal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"healthy\",\n          children: \"Eat healthier\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"budget\",\n          children: \"Save time & money\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"simple\",\n          children: \"Just plan meals\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Meals Per Day:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        name: \"mealsPerDay\",\n        min: \"1\",\n        max: \"3\",\n        value: form.mealsPerDay,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Plan Length (days):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"planLength\",\n        value: form.planLength,\n        onChange: handleChange,\n        children: [3, 5, 7].map(num => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: num,\n          children: num\n        }, num, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 33\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Budget Level:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"budget\",\n        value: form.budget,\n        onChange: handleChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"low\",\n          children: \"Low\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"medium\",\n          children: \"Medium\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"high\",\n          children: \"High\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Allergies:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"allergies\",\n        value: form.allergies,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: loading ? \"Generating...\" : \"Generate Meal Plan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 17\n    }, this), parsedPlan.days.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '30px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Weekly Meal Plan:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 11\n      }, this), parsedPlan.days.map((day, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: '16px',\n          background: '#f9fafb',\n          borderRadius: '12px',\n          marginBottom: '12px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: day.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 15\n        }, this), day.meals.map((meal, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [meal.type, \": \", meal.title]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: meal.steps.map((step, j) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: step\n            }, j, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 23\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 19\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 17\n        }, this))]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Grocery List:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 11\n      }, this), Object.keys(parsedPlan.groceryList).length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background: '#f3f4f6',\n          borderRadius: '12px',\n          padding: '16px'\n        },\n        children: Object.keys(parsedPlan.groceryList).map((category, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: category\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: parsedPlan.groceryList[category].map((item, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: item\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 72\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 19\n          }, this)]\n        }, idx, true, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"em\", {\n          children: \"No grocery list was provided.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 16\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDownload,\n        children: \"Download as .txt\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n}\n_s(MealPlannerForm, \"LwuhZSCfYn9KrLKW+ypAz+sVI5s=\");\n_c = MealPlannerForm;\nexport default MealPlannerForm;\nvar _c;\n$RefreshReg$(_c, \"MealPlannerForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","MEAL_STYLES","MEAL_ORDER","MealPlannerForm","_s","form","setForm","mealStyles","goal","mealsPerDay","planLength","budget","allergies","loading","setLoading","mealPlan","setMealPlan","error","setError","parsedPlan","setParsedPlan","days","groceryList","handleChange","e","name","value","type","checked","target","prev","filter","v","cleanLine","line","replace","parseMealPlan","text","lines","split","map","Boolean","currentDay","currentMeal","currentGroceryCategory","inGrocery","dayRegex","mealRegex","test","push","title","meals","rest","trim","join","steps","startsWith","toLowerCase","includes","endsWith","_groceryList$currentG","trimmedDays","slice","Number","day","validMeals","find","m","handleSubmit","preventDefault","prompt","length","response","fetch","method","headers","body","JSON","stringify","data","json","result","console","log","parsed","err","handleDownload","element","document","createElement","file","Blob","href","URL","createObjectURL","download","appendChild","click","children","onSubmit","className","fileName","_jsxFileName","lineNumber","columnNumber","style","display","flexWrap","gap","onChange","min","max","num","color","marginTop","index","padding","background","borderRadius","marginBottom","meal","i","step","j","Object","keys","category","idx","item","onClick","_c","$RefreshReg$"],"sources":["C:/Users/aidan/OneDrive/Documents/Projects/ai-meal-planner/src/components/MealPlannerForm.js"],"sourcesContent":["\nimport React, { useState } from 'react';\n\nconst MEAL_STYLES = [\n  \"Vegan\", \"Vegetarian\", \"Pescatarian\", \"Keto\",\n  \"Paleo\", \"Mediterranean\", \"High-Protein\",\n  \"Low-Carb\", \"Low-Fat\", \"Whole30\"\n];\n\nconst MEAL_ORDER = [\"Breakfast\", \"Lunch\", \"Dinner\"];\n\nfunction MealPlannerForm() {\n  const [form, setForm] = useState({\n    mealStyles: [],\n    goal: '',\n    mealsPerDay: 3,\n    planLength: 7,\n    budget: '',\n    allergies: ''\n  });\n\n  const [loading, setLoading] = useState(false);\n  const [mealPlan, setMealPlan] = useState('');\n  const [error, setError] = useState('');\n  const [parsedPlan, setParsedPlan] = useState({ days: [], groceryList: {} });\n\n  const handleChange = (e) => {\n    const { name, value, type, checked } = e.target;\n\n    if (name === \"mealStyles\") {\n      setForm((prev) => ({\n        ...prev,\n        mealStyles: checked\n          ? [...prev.mealStyles, value]\n          : prev.mealStyles.filter((v) => v !== value)\n      }));\n    } else {\n      setForm({ ...form, [name]: value });\n    }\n  };\n\n  const cleanLine = (line) =>\n    line.replace(/\\*+/g, '')        // remove asterisks\n        .replace(/：/g, ':')          // convert full-width colon\n        .replace(/^\\s+|\\s+$/g, ''); // trim whitespace\n\n  const parseMealPlan = (text) => {\n    const lines = text.split('\\n').map(cleanLine).filter(Boolean);\n    const days = [];\n    const groceryList = {};\n\n    let currentDay = null;\n    let currentMeal = null;\n    let currentGroceryCategory = '';\n    let inGrocery = false;\n    const dayRegex = /^Day\\s+\\d+:?/i;\n    const mealRegex = /^(Breakfast|Lunch|Dinner):/i;\n\n    for (let line of lines) {\n      if (dayRegex.test(line)) {\n        if (currentDay) days.push(currentDay);\n        currentDay = { title: line.replace(':', ''), meals: [] };\n        inGrocery = false;\n      } else if (mealRegex.test(line)) {\n        const [type, ...rest] = line.split(':');\n        currentMeal = { type: type.trim(), title: rest.join(':').trim(), steps: [] };\n        if (currentDay) currentDay.meals.push(currentMeal);\n      } else if (line.startsWith('-') && currentMeal) {\n        currentMeal.steps.push(line.replace(/^[-–]\\s*/, ''));\n      } else if (line.toLowerCase().includes('grocery list')) {\n        inGrocery = true;\n        if (currentDay) days.push(currentDay);\n        currentDay = null;\n      } else if (inGrocery && line.endsWith(':')) {\n        currentGroceryCategory = line.replace(':', '');\n        groceryList[currentGroceryCategory] = [];\n      } else if (inGrocery && line.startsWith('-')) {\n        groceryList[currentGroceryCategory]?.push(line.replace('- ', ''));\n      }\n    }\n    if (currentDay) days.push(currentDay);\n\n    // Final trim of day and meal counts\n    const trimmedDays = days.slice(0, Number(form.planLength)).map(day => {\n      const validMeals = MEAL_ORDER.map(type =>\n        day.meals.find(m => m.type.toLowerCase() === type.toLowerCase())\n      ).filter(Boolean);\n      return { ...day, meals: validMeals.slice(0, form.mealsPerDay) };\n    });\n\n    return { days: trimmedDays, groceryList };\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setMealPlan('');\n    setError('');\n    setParsedPlan({ days: [], groceryList: {} });\n\n    const prompt = `\nYou are a meal planner AI. Generate a ${form.planLength}-day meal plan with exactly ${form.mealsPerDay} meals per day.\nMeal styles: ${form.mealStyles.length ? form.mealStyles.join(', ') : 'None'}\nGoal: ${form.goal}, Budget: ${form.budget}, Allergies: ${form.allergies || 'None'}\n\nFormat it like this:\nDay 1:\nBreakfast: [title]\n- step\n- step\nLunch: [title]\n- step\nDinner: [title]\n- step\n\nOnly use the number of meals selected, and follow meal label order: Breakfast, Lunch, Dinner.\n\nGROCERY LIST:\nProduce:\n- ...\nGrains:\n- ...\n`;\n\n    try {\n      const response = await fetch(\"http://localhost:5000/api/mealplan\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ prompt })\n      });\n\n      const data = await response.json();\n      if (data.result) {\n        console.log(\"GPT RAW:\", data.result);\n        setMealPlan(data.result);\n        const parsed = parseMealPlan(data.result);\n        setParsedPlan(parsed);\n      } else {\n        setError(\"Something went wrong. Please try again.\");\n      }\n    } catch (err) {\n      console.error(err);\n      setError(\"Could not connect to backend.\");\n    }\n    setLoading(false);\n  };\n\n  const handleDownload = () => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([mealPlan], { type: \"text/plain\" });\n    element.href = URL.createObjectURL(file);\n    element.download = \"meal-plan.txt\";\n    document.body.appendChild(element);\n    element.click();\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label>Meal Style Preferences:</label>\n          <div style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\n            {MEAL_STYLES.map(style => (\n              <label key={style}>\n                <input\n                  type=\"checkbox\"\n                  name=\"mealStyles\"\n                  value={style}\n                  checked={form.mealStyles.includes(style)}\n                  onChange={handleChange}\n                /> {style}\n              </label>\n            ))}\n          </div>\n        </div>\n\n        <label>Meal Planning Goal:</label>\n        <select name=\"goal\" value={form.goal} onChange={handleChange}>\n          <option value=\"\">Select a goal</option>\n          <option value=\"healthy\">Eat healthier</option>\n          <option value=\"budget\">Save time & money</option>\n          <option value=\"simple\">Just plan meals</option>\n        </select>\n\n        <label>Meals Per Day:</label>\n        <input type=\"number\" name=\"mealsPerDay\" min=\"1\" max=\"3\" value={form.mealsPerDay} onChange={handleChange} />\n\n        <label>Plan Length (days):</label>\n        <select name=\"planLength\" value={form.planLength} onChange={handleChange}>\n          {[3, 5, 7].map(num => <option key={num} value={num}>{num}</option>)}\n        </select>\n\n        <label>Budget Level:</label>\n        <select name=\"budget\" value={form.budget} onChange={handleChange}>\n          <option value=\"\">Select</option>\n          <option value=\"low\">Low</option>\n          <option value=\"medium\">Medium</option>\n          <option value=\"high\">High</option>\n        </select>\n\n        <label>Allergies:</label>\n        <input type=\"text\" name=\"allergies\" value={form.allergies} onChange={handleChange} />\n\n        <button type=\"submit\">{loading ? \"Generating...\" : \"Generate Meal Plan\"}</button>\n      </form>\n\n      {error && <p style={{ color: 'red' }}>{error}</p>}\n\n      {parsedPlan.days.length > 0 && (\n        <div style={{ marginTop: '30px' }}>\n          <h3>Weekly Meal Plan:</h3>\n          {parsedPlan.days.map((day, index) => (\n            <div key={index} style={{ padding: '16px', background: '#f9fafb', borderRadius: '12px', marginBottom: '12px' }}>\n              <h4>{day.title}</h4>\n              {day.meals.map((meal, i) => (\n                <div key={i}>\n                  <strong>{meal.type}: {meal.title}</strong>\n                  <ul>\n                    {meal.steps.map((step, j) => (\n                      <li key={j}>{step}</li>\n                    ))}\n                  </ul>\n                </div>\n              ))}\n            </div>\n          ))}\n\n          <h3>Grocery List:</h3>\n          {Object.keys(parsedPlan.groceryList).length > 0 ? (\n            <div style={{ background: '#f3f4f6', borderRadius: '12px', padding: '16px' }}>\n              {Object.keys(parsedPlan.groceryList).map((category, idx) => (\n                <div key={idx}>\n                  <strong>{category}</strong>\n                  <ul>\n                    {parsedPlan.groceryList[category].map((item, i) => <li key={i}>{item}</li>)}\n                  </ul>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <p><em>No grocery list was provided.</em></p>\n          )}\n          <button onClick={handleDownload}>Download as .txt</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default MealPlannerForm;\n"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,WAAW,GAAG,CAClB,OAAO,EAAE,YAAY,EAAE,aAAa,EAAE,MAAM,EAC5C,OAAO,EAAE,eAAe,EAAE,cAAc,EACxC,UAAU,EAAE,SAAS,EAAE,SAAS,CACjC;AAED,MAAMC,UAAU,GAAG,CAAC,WAAW,EAAE,OAAO,EAAE,QAAQ,CAAC;AAEnD,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACzB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC;IAC/BS,UAAU,EAAE,EAAE;IACdC,IAAI,EAAE,EAAE;IACRC,WAAW,EAAE,CAAC;IACdC,UAAU,EAAE,CAAC;IACbC,MAAM,EAAE,EAAE;IACVC,SAAS,EAAE;EACb,CAAC,CAAC;EAEF,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACiB,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACmB,KAAK,EAAEC,QAAQ,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACqB,UAAU,EAAEC,aAAa,CAAC,GAAGtB,QAAQ,CAAC;IAAEuB,IAAI,EAAE,EAAE;IAAEC,WAAW,EAAE,CAAC;EAAE,CAAC,CAAC;EAE3E,MAAMC,YAAY,GAAIC,CAAC,IAAK;IAC1B,MAAM;MAAEC,IAAI;MAAEC,KAAK;MAAEC,IAAI;MAAEC;IAAQ,CAAC,GAAGJ,CAAC,CAACK,MAAM;IAE/C,IAAIJ,IAAI,KAAK,YAAY,EAAE;MACzBnB,OAAO,CAAEwB,IAAI,KAAM;QACjB,GAAGA,IAAI;QACPvB,UAAU,EAAEqB,OAAO,GACf,CAAC,GAAGE,IAAI,CAACvB,UAAU,EAAEmB,KAAK,CAAC,GAC3BI,IAAI,CAACvB,UAAU,CAACwB,MAAM,CAAEC,CAAC,IAAKA,CAAC,KAAKN,KAAK;MAC/C,CAAC,CAAC,CAAC;IACL,CAAC,MAAM;MACLpB,OAAO,CAAC;QAAE,GAAGD,IAAI;QAAE,CAACoB,IAAI,GAAGC;MAAM,CAAC,CAAC;IACrC;EACF,CAAC;EAED,MAAMO,SAAS,GAAIC,IAAI,IACrBA,IAAI,CAACC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAQ;EAAA,CAC3BA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAU;EAAA,CAC5BA,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC,CAAC;;EAElC,MAAMC,aAAa,GAAIC,IAAI,IAAK;IAC9B,MAAMC,KAAK,GAAGD,IAAI,CAACE,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,CAACP,SAAS,CAAC,CAACF,MAAM,CAACU,OAAO,CAAC;IAC7D,MAAMpB,IAAI,GAAG,EAAE;IACf,MAAMC,WAAW,GAAG,CAAC,CAAC;IAEtB,IAAIoB,UAAU,GAAG,IAAI;IACrB,IAAIC,WAAW,GAAG,IAAI;IACtB,IAAIC,sBAAsB,GAAG,EAAE;IAC/B,IAAIC,SAAS,GAAG,KAAK;IACrB,MAAMC,QAAQ,GAAG,eAAe;IAChC,MAAMC,SAAS,GAAG,6BAA6B;IAE/C,KAAK,IAAIb,IAAI,IAAII,KAAK,EAAE;MACtB,IAAIQ,QAAQ,CAACE,IAAI,CAACd,IAAI,CAAC,EAAE;QACvB,IAAIQ,UAAU,EAAErB,IAAI,CAAC4B,IAAI,CAACP,UAAU,CAAC;QACrCA,UAAU,GAAG;UAAEQ,KAAK,EAAEhB,IAAI,CAACC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;UAAEgB,KAAK,EAAE;QAAG,CAAC;QACxDN,SAAS,GAAG,KAAK;MACnB,CAAC,MAAM,IAAIE,SAAS,CAACC,IAAI,CAACd,IAAI,CAAC,EAAE;QAC/B,MAAM,CAACP,IAAI,EAAE,GAAGyB,IAAI,CAAC,GAAGlB,IAAI,CAACK,KAAK,CAAC,GAAG,CAAC;QACvCI,WAAW,GAAG;UAAEhB,IAAI,EAAEA,IAAI,CAAC0B,IAAI,CAAC,CAAC;UAAEH,KAAK,EAAEE,IAAI,CAACE,IAAI,CAAC,GAAG,CAAC,CAACD,IAAI,CAAC,CAAC;UAAEE,KAAK,EAAE;QAAG,CAAC;QAC5E,IAAIb,UAAU,EAAEA,UAAU,CAACS,KAAK,CAACF,IAAI,CAACN,WAAW,CAAC;MACpD,CAAC,MAAM,IAAIT,IAAI,CAACsB,UAAU,CAAC,GAAG,CAAC,IAAIb,WAAW,EAAE;QAC9CA,WAAW,CAACY,KAAK,CAACN,IAAI,CAACf,IAAI,CAACC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;MACtD,CAAC,MAAM,IAAID,IAAI,CAACuB,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,cAAc,CAAC,EAAE;QACtDb,SAAS,GAAG,IAAI;QAChB,IAAIH,UAAU,EAAErB,IAAI,CAAC4B,IAAI,CAACP,UAAU,CAAC;QACrCA,UAAU,GAAG,IAAI;MACnB,CAAC,MAAM,IAAIG,SAAS,IAAIX,IAAI,CAACyB,QAAQ,CAAC,GAAG,CAAC,EAAE;QAC1Cf,sBAAsB,GAAGV,IAAI,CAACC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;QAC9Cb,WAAW,CAACsB,sBAAsB,CAAC,GAAG,EAAE;MAC1C,CAAC,MAAM,IAAIC,SAAS,IAAIX,IAAI,CAACsB,UAAU,CAAC,GAAG,CAAC,EAAE;QAAA,IAAAI,qBAAA;QAC5C,CAAAA,qBAAA,GAAAtC,WAAW,CAACsB,sBAAsB,CAAC,cAAAgB,qBAAA,uBAAnCA,qBAAA,CAAqCX,IAAI,CAACf,IAAI,CAACC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;MACnE;IACF;IACA,IAAIO,UAAU,EAAErB,IAAI,CAAC4B,IAAI,CAACP,UAAU,CAAC;;IAErC;IACA,MAAMmB,WAAW,GAAGxC,IAAI,CAACyC,KAAK,CAAC,CAAC,EAAEC,MAAM,CAAC1D,IAAI,CAACK,UAAU,CAAC,CAAC,CAAC8B,GAAG,CAACwB,GAAG,IAAI;MACpE,MAAMC,UAAU,GAAG/D,UAAU,CAACsC,GAAG,CAACb,IAAI,IACpCqC,GAAG,CAACb,KAAK,CAACe,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACxC,IAAI,CAAC8B,WAAW,CAAC,CAAC,KAAK9B,IAAI,CAAC8B,WAAW,CAAC,CAAC,CACjE,CAAC,CAAC1B,MAAM,CAACU,OAAO,CAAC;MACjB,OAAO;QAAE,GAAGuB,GAAG;QAAEb,KAAK,EAAEc,UAAU,CAACH,KAAK,CAAC,CAAC,EAAEzD,IAAI,CAACI,WAAW;MAAE,CAAC;IACjE,CAAC,CAAC;IAEF,OAAO;MAAEY,IAAI,EAAEwC,WAAW;MAAEvC;IAAY,CAAC;EAC3C,CAAC;EAED,MAAM8C,YAAY,GAAG,MAAO5C,CAAC,IAAK;IAChCA,CAAC,CAAC6C,cAAc,CAAC,CAAC;IAClBvD,UAAU,CAAC,IAAI,CAAC;IAChBE,WAAW,CAAC,EAAE,CAAC;IACfE,QAAQ,CAAC,EAAE,CAAC;IACZE,aAAa,CAAC;MAAEC,IAAI,EAAE,EAAE;MAAEC,WAAW,EAAE,CAAC;IAAE,CAAC,CAAC;IAE5C,MAAMgD,MAAM,GAAG;AACnB,wCAAwCjE,IAAI,CAACK,UAAU,+BAA+BL,IAAI,CAACI,WAAW;AACtG,eAAeJ,IAAI,CAACE,UAAU,CAACgE,MAAM,GAAGlE,IAAI,CAACE,UAAU,CAAC+C,IAAI,CAAC,IAAI,CAAC,GAAG,MAAM;AAC3E,QAAQjD,IAAI,CAACG,IAAI,aAAaH,IAAI,CAACM,MAAM,gBAAgBN,IAAI,CAACO,SAAS,IAAI,MAAM;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;IAEG,IAAI;MACF,MAAM4D,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,EAAE;QACjEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAER;QAAO,CAAC;MACjC,CAAC,CAAC;MAEF,MAAMS,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClC,IAAID,IAAI,CAACE,MAAM,EAAE;QACfC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEJ,IAAI,CAACE,MAAM,CAAC;QACpCjE,WAAW,CAAC+D,IAAI,CAACE,MAAM,CAAC;QACxB,MAAMG,MAAM,GAAGhD,aAAa,CAAC2C,IAAI,CAACE,MAAM,CAAC;QACzC7D,aAAa,CAACgE,MAAM,CAAC;MACvB,CAAC,MAAM;QACLlE,QAAQ,CAAC,yCAAyC,CAAC;MACrD;IACF,CAAC,CAAC,OAAOmE,GAAG,EAAE;MACZH,OAAO,CAACjE,KAAK,CAACoE,GAAG,CAAC;MAClBnE,QAAQ,CAAC,+BAA+B,CAAC;IAC3C;IACAJ,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC;EAED,MAAMwE,cAAc,GAAGA,CAAA,KAAM;IAC3B,MAAMC,OAAO,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IAC3C,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC5E,QAAQ,CAAC,EAAE;MAAEY,IAAI,EAAE;IAAa,CAAC,CAAC;IACzD4D,OAAO,CAACK,IAAI,GAAGC,GAAG,CAACC,eAAe,CAACJ,IAAI,CAAC;IACxCH,OAAO,CAACQ,QAAQ,GAAG,eAAe;IAClCP,QAAQ,CAACZ,IAAI,CAACoB,WAAW,CAACT,OAAO,CAAC;IAClCA,OAAO,CAACU,KAAK,CAAC,CAAC;EACjB,CAAC;EAED,oBACEjG,OAAA;IAAAkG,QAAA,gBACElG,OAAA;MAAMmG,QAAQ,EAAE/B,YAAa;MAAA8B,QAAA,gBAC3BlG,OAAA;QAAKoG,SAAS,EAAC,YAAY;QAAAF,QAAA,gBACzBlG,OAAA;UAAAkG,QAAA,EAAO;QAAuB;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACtCxG,OAAA;UAAKyG,KAAK,EAAE;YAAEC,OAAO,EAAE,MAAM;YAAEC,QAAQ,EAAE,MAAM;YAAEC,GAAG,EAAE;UAAO,CAAE;UAAAV,QAAA,EAC5DjG,WAAW,CAACuC,GAAG,CAACiE,KAAK,iBACpBzG,OAAA;YAAAkG,QAAA,gBACElG,OAAA;cACE2B,IAAI,EAAC,UAAU;cACfF,IAAI,EAAC,YAAY;cACjBC,KAAK,EAAE+E,KAAM;cACb7E,OAAO,EAAEvB,IAAI,CAACE,UAAU,CAACmD,QAAQ,CAAC+C,KAAK,CAAE;cACzCI,QAAQ,EAAEtF;YAAa;cAAA8E,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACxB,CAAC,KAAC,EAACC,KAAK;UAAA,GAPCA,KAAK;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAQV,CACR;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eAENxG,OAAA;QAAAkG,QAAA,EAAO;MAAmB;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAClCxG,OAAA;QAAQyB,IAAI,EAAC,MAAM;QAACC,KAAK,EAAErB,IAAI,CAACG,IAAK;QAACqG,QAAQ,EAAEtF,YAAa;QAAA2E,QAAA,gBAC3DlG,OAAA;UAAQ0B,KAAK,EAAC,EAAE;UAAAwE,QAAA,EAAC;QAAa;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACvCxG,OAAA;UAAQ0B,KAAK,EAAC,SAAS;UAAAwE,QAAA,EAAC;QAAa;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC9CxG,OAAA;UAAQ0B,KAAK,EAAC,QAAQ;UAAAwE,QAAA,EAAC;QAAiB;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACjDxG,OAAA;UAAQ0B,KAAK,EAAC,QAAQ;UAAAwE,QAAA,EAAC;QAAe;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzC,CAAC,eAETxG,OAAA;QAAAkG,QAAA,EAAO;MAAc;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAC7BxG,OAAA;QAAO2B,IAAI,EAAC,QAAQ;QAACF,IAAI,EAAC,aAAa;QAACqF,GAAG,EAAC,GAAG;QAACC,GAAG,EAAC,GAAG;QAACrF,KAAK,EAAErB,IAAI,CAACI,WAAY;QAACoG,QAAQ,EAAEtF;MAAa;QAAA8E,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAE3GxG,OAAA;QAAAkG,QAAA,EAAO;MAAmB;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAClCxG,OAAA;QAAQyB,IAAI,EAAC,YAAY;QAACC,KAAK,EAAErB,IAAI,CAACK,UAAW;QAACmG,QAAQ,EAAEtF,YAAa;QAAA2E,QAAA,EACtE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC1D,GAAG,CAACwE,GAAG,iBAAIhH,OAAA;UAAkB0B,KAAK,EAAEsF,GAAI;UAAAd,QAAA,EAAEc;QAAG,GAArBA,GAAG;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAA2B,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7D,CAAC,eAETxG,OAAA;QAAAkG,QAAA,EAAO;MAAa;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAC5BxG,OAAA;QAAQyB,IAAI,EAAC,QAAQ;QAACC,KAAK,EAAErB,IAAI,CAACM,MAAO;QAACkG,QAAQ,EAAEtF,YAAa;QAAA2E,QAAA,gBAC/DlG,OAAA;UAAQ0B,KAAK,EAAC,EAAE;UAAAwE,QAAA,EAAC;QAAM;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAChCxG,OAAA;UAAQ0B,KAAK,EAAC,KAAK;UAAAwE,QAAA,EAAC;QAAG;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAChCxG,OAAA;UAAQ0B,KAAK,EAAC,QAAQ;UAAAwE,QAAA,EAAC;QAAM;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACtCxG,OAAA;UAAQ0B,KAAK,EAAC,MAAM;UAAAwE,QAAA,EAAC;QAAI;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5B,CAAC,eAETxG,OAAA;QAAAkG,QAAA,EAAO;MAAU;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACzBxG,OAAA;QAAO2B,IAAI,EAAC,MAAM;QAACF,IAAI,EAAC,WAAW;QAACC,KAAK,EAAErB,IAAI,CAACO,SAAU;QAACiG,QAAQ,EAAEtF;MAAa;QAAA8E,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAErFxG,OAAA;QAAQ2B,IAAI,EAAC,QAAQ;QAAAuE,QAAA,EAAErF,OAAO,GAAG,eAAe,GAAG;MAAoB;QAAAwF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7E,CAAC,EAENvF,KAAK,iBAAIjB,OAAA;MAAGyG,KAAK,EAAE;QAAEQ,KAAK,EAAE;MAAM,CAAE;MAAAf,QAAA,EAAEjF;IAAK;MAAAoF,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAEhDrF,UAAU,CAACE,IAAI,CAACkD,MAAM,GAAG,CAAC,iBACzBvE,OAAA;MAAKyG,KAAK,EAAE;QAAES,SAAS,EAAE;MAAO,CAAE;MAAAhB,QAAA,gBAChClG,OAAA;QAAAkG,QAAA,EAAI;MAAiB;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACzBrF,UAAU,CAACE,IAAI,CAACmB,GAAG,CAAC,CAACwB,GAAG,EAAEmD,KAAK,kBAC9BnH,OAAA;QAAiByG,KAAK,EAAE;UAAEW,OAAO,EAAE,MAAM;UAAEC,UAAU,EAAE,SAAS;UAAEC,YAAY,EAAE,MAAM;UAAEC,YAAY,EAAE;QAAO,CAAE;QAAArB,QAAA,gBAC7GlG,OAAA;UAAAkG,QAAA,EAAKlC,GAAG,CAACd;QAAK;UAAAmD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,EACnBxC,GAAG,CAACb,KAAK,CAACX,GAAG,CAAC,CAACgF,IAAI,EAAEC,CAAC,kBACrBzH,OAAA;UAAAkG,QAAA,gBACElG,OAAA;YAAAkG,QAAA,GAASsB,IAAI,CAAC7F,IAAI,EAAC,IAAE,EAAC6F,IAAI,CAACtE,KAAK;UAAA;YAAAmD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAS,CAAC,eAC1CxG,OAAA;YAAAkG,QAAA,EACGsB,IAAI,CAACjE,KAAK,CAACf,GAAG,CAAC,CAACkF,IAAI,EAAEC,CAAC,kBACtB3H,OAAA;cAAAkG,QAAA,EAAawB;YAAI,GAARC,CAAC;cAAAtB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAY,CACvB;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC;QAAA,GANGiB,CAAC;UAAApB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAON,CACN,CAAC;MAAA,GAXMW,KAAK;QAAAd,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAYV,CACN,CAAC,eAEFxG,OAAA;QAAAkG,QAAA,EAAI;MAAa;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACrBoB,MAAM,CAACC,IAAI,CAAC1G,UAAU,CAACG,WAAW,CAAC,CAACiD,MAAM,GAAG,CAAC,gBAC7CvE,OAAA;QAAKyG,KAAK,EAAE;UAAEY,UAAU,EAAE,SAAS;UAAEC,YAAY,EAAE,MAAM;UAAEF,OAAO,EAAE;QAAO,CAAE;QAAAlB,QAAA,EAC1E0B,MAAM,CAACC,IAAI,CAAC1G,UAAU,CAACG,WAAW,CAAC,CAACkB,GAAG,CAAC,CAACsF,QAAQ,EAAEC,GAAG,kBACrD/H,OAAA;UAAAkG,QAAA,gBACElG,OAAA;YAAAkG,QAAA,EAAS4B;UAAQ;YAAAzB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAS,CAAC,eAC3BxG,OAAA;YAAAkG,QAAA,EACG/E,UAAU,CAACG,WAAW,CAACwG,QAAQ,CAAC,CAACtF,GAAG,CAAC,CAACwF,IAAI,EAAEP,CAAC,kBAAKzH,OAAA;cAAAkG,QAAA,EAAa8B;YAAI,GAARP,CAAC;cAAApB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAY,CAAC;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACzE,CAAC;QAAA,GAJGuB,GAAG;UAAA1B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAKR,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,gBAENxG,OAAA;QAAAkG,QAAA,eAAGlG,OAAA;UAAAkG,QAAA,EAAI;QAA6B;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAC7C,eACDxG,OAAA;QAAQiI,OAAO,EAAE3C,cAAe;QAAAY,QAAA,EAAC;MAAgB;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvD,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACpG,EAAA,CA5OQD,eAAe;AAAA+H,EAAA,GAAf/H,eAAe;AA8OxB,eAAeA,eAAe;AAAC,IAAA+H,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}